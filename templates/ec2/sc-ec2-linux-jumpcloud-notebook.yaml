AWSTemplateFormatVersion: '2010-09-09'
Description: 'Service Catalog: Notebook Linux EC2'
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - E7001
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Linux Instance Configuration
        Parameters:
          - EC2InstanceType
          - NotebookType
          - VolumeSize
    ParameterLabels:
      EC2InstanceType:
        default: EC2 Instance Type
      NotebookType:
        default: Notebook Type
      VolumeSize:
        default: Disk Size

Mappings:
  NotebookTypes:
    Rstudio:
      AMIID: "ami-0121a609286ef5a2a" # https://github.com/Sage-Bionetworks-IT/packer-rstudio/tree/v3.0.7
  AccountToImportParams:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        # include is @ https://github.com/Sage-Bionetworks/admincentral-infra/blob/master/templates/cfn-service-catalog-snippets.yaml
        Location: s3://cfn-snippets-bucket-cloudformationsnippetsbucket-elu83sv8ocdz/scipool-sc-lib-infra/ScAccountToExportMappping.yaml

Parameters:

  EC2InstanceType:
    AllowedValues:
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - t3a.2xlarge
      - m7a.medium
      - m7a.large
      - m7a.xlarge
      - m7a.2xlarge
      - m7a.4xlarge
      - m7a.8xlarge
      - c7a.medium
      - c7a.large
      - c7a.xlarge
      - c7a.2xlarge
      - c7a.4xlarge
      - c7a.8xlarge
      - r7a.medium
      - r7a.large
      - r7a.xlarge
      - r7a.2xlarge
      - r7a.4xlarge
      - r7a.8xlarge
      - g5.xlarge
      - g5.2xlarge
      - g5.4xlarge
    Default: t3a.small
    Description: Amazon EC2 Instance Type
    Type: String

  NotebookType:
    Type: String
    Description: Type of notebook software to install
    Default: Rstudio
    AllowedValues:
      - Rstudio

  VolumeSize:
    Description: The EC2 volume size (in GB)
    Type: Number
    Default: 30
    MinValue: 30
    MaxValue: 2000

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - !ImportValue
          'Fn::Sub': '${AWS::Region}-essentials-TagRootVolumePolicy'
        - !ImportValue
          'Fn::Sub': '${AWS::Region}-cfn-tag-instance-policy-TagInstancePolicy'
        - !ImportValue
          'Fn::Sub': '${AWS::Region}-get-role-policy-ReadAssumedRoleInformationPolicy'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore' #For maintenance tasks
        - !ImportValue
          'Fn::Sub': '${AWS::Region}-sc-product-ec2-linux-notebook-write-to-ssm-policy-WriteToSSMPolicy'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com #For maintenance service
            Action:
              - sts:AssumeRole

  NotebookConnectSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W1011
    Properties:
      GroupDescription: 'Add ingress to 443 from notebook connection ALB'
      VpcId: !ImportValue
        'Fn::FindInMap': [AccountToImportParams, !Ref "AWS::AccountId", VPCId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !ImportValue
            'Fn::Sub': '${AWS::Region}-alb-notebook-access-ALBSecurityGroup'

  TgwHubSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W1011
    Properties:
      GroupDescription: 'Allow network access from TGW Hub'
      VpcId: !ImportValue
        'Fn::FindInMap': [AccountToImportParams, !Ref "AWS::AccountId", VPCId]
      SecurityGroupIngress:
        - CidrIp: "10.50.0.0/16"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'InstanceRole'

  # The EC2 instance writes to it, but this is introduced for the cleanup of the parameter
  InstanceSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      # This will need to be synced with the `packer-rstudio` project
      Name: !Sub "/service-catalog/synapse/cred/${LinuxInstance}/oidc-accesstoken"
      Type: String
      Value: to be replaced by EC2

  SSMParameterEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: key used to encrypt SSM Parameters for a EC2 instance
      # number of days to wait before key gets deleted
      PendingWindowInDays: 7
      EnableKeyRotation: "true"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
        # https://dev.to/jansonsa/aws-how-to-deny-access-to-resources-while-allowing-a-specific-role-547b
        - Sid: "Deny decrypt to all Principals that shouldn't require access"
          Effect: 'Deny'
          Principal: "*"
          Condition:
            StringNotEquals:
              "aws:PrincipalArn": !Sub "${InstanceRole.Arn}"
          Action:
            - kms:Decrypt
          Resource: '*'
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS: !Sub "${InstanceRole.Arn}"
          Action:
          - kms:DescribeKey
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey
          - kms:GenerateDataKeyWithoutPlaintext
          Resource: '*'
        - Sid: 'Default KMS Policy that enables IAM permissions'  # https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default
          Effect: 'Allow'
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action:
            - 'kms:*'
          Resource: '*'
        - Sid: "Allow administration of the key to CFN service role"
          Effect: "Allow"
          Principal:
            AWS:
              - !ImportValue
                'Fn::Sub': '${AWS::Region}-sc-ec2vpc-launchrole-LaunchRoleArn'
          Action:
            - "kms:Create*"
            - "kms:Describe*"
            - "kms:Enable*"
            - "kms:List*"
            - "kms:Put*"
            - "kms:Update*"
            - "kms:Revoke*"
            - "kms:Disable*"
            - "kms:Get*"
            - "kms:Delete*"
            - "kms:ScheduleKeyDeletion"
            - "kms:CancelKeyDeletion"
          Resource: "*"

  SSMParameterEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      # This will need to be synced with the `packer-rstudio` project
      AliasName: !Sub 'alias/service-catalog/synapse/cred/${LinuxInstance}'
      TargetKeyId: !Ref SSMParameterEncryptionKey

  LinuxInstance:
    Type: AWS::EC2::Instance
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E1022
            - W1011
      'AWS::CloudFormation::Init':
        configSets:
          SetupCfn:
            - cfn_hup_service
          SetEnv:
            - set_env_vars
          SetupApacheProxy:
            - write_apache_conf
          SetupSynapseCredEnv:
            - write_synapse_env
        cfn_hup_service:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LinuxInstance.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource LinuxInstance --configsets SetupCfn,SetEnv,SetupApacheProxy,SetupSynapseCredEnv --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
              mode: "000400"
              owner: root
              group: root
          commands:
            01_enable_cfn-hup:
              command: "/usr/bin/systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "/usr/bin/systemctl start cfn-hup.service"
        set_env_vars:
          files:
            /opt/sage/bin/make_env_vars_file.sh:
              source: "https://raw.githubusercontent.com/Sage-Bionetworks/service-catalog-utils/v2.0.3/linux/opt/sage/bin/make_env_vars_file.sh"
              mode: "00744"
              owner: "root"
              group: "root"
          commands:
            01_make_env_vars_file:
              command: "/bin/bash /opt/sage/bin/make_env_vars_file.sh"
              env:
                AWS_REGION: !Ref AWS::Region
                STACK_NAME: !Ref AWS::StackName
                STACK_ID: !Ref AWS::StackId
        write_apache_conf:
          files:
            /opt/sage/bin/apache_conf_rewrite.sh:
              source: "https://raw.githubusercontent.com/Sage-Bionetworks/service-catalog-utils/v2.0.3/linux/opt/sage/bin/apache_conf_rewrite.sh"
              mode: "00744"
              owner: "root"
              group: "root"
          commands:
            01_rewrite_apache_conf:
              command: "/bin/bash /opt/sage/bin/apache_conf_rewrite.sh"
        write_synapse_env:
          files:
            /opt/sage/bin/apache_synapse_cred_env.sh:
              source: "https://raw.githubusercontent.com/Sage-Bionetworks/service-catalog-utils/v2.0.3/linux/opt/sage/bin/apache_synapse_cred_env.sh"
              mode: "00744"
              owner: "root"
              group: "root"
            /opt/sage/bin/rstudio_synapse_cred_env.sh:
              source: "https://raw.githubusercontent.com/Sage-Bionetworks/service-catalog-utils/v2.0.3/linux/opt/sage/bin/rstudio_synapse_cred_env.sh"
              mode: "00744"
              owner: "root"
              group: "root"
          commands:
            01_write_apache_env:
              command: "/bin/bash /opt/sage/bin/apache_synapse_cred_env.sh"
              env:
                # Sync w/ InstanceSSMParameter and SSMParameterEncryptionKey
                SERVICE_CATALOG_PREFIX: "service-catalog/synapse/cred"
                SSM_PARAMETER_SUFFIX: "oidc-accesstoken"
            02_write_rstudio_env:
              command: "/bin/bash /opt/sage/bin/rstudio_synapse_cred_env.sh"
              env:
                # Sync w/ InstanceSSMParameter and SSMParameterEncryptionKey
                SERVICE_CATALOG_PREFIX: "service-catalog/synapse/cred"
                SSM_PARAMETER_SUFFIX: "oidc-accesstoken"

    Properties:
      ImageId: !FindInMap [NotebookTypes, !Ref NotebookType, AMIID]
      InstanceType: !Ref 'EC2InstanceType'
      SubnetId: !ImportValue
          'Fn::FindInMap': [AccountToImportParams, !Ref "AWS::AccountId", PrivateSubnet]
      SecurityGroupIds:
        - !ImportValue
          'Fn::FindInMap': [AccountToImportParams, !Ref "AWS::AccountId", VpnSecurityGroup]
        - !Ref NotebookConnectSecurityGroup
        - !Ref TgwHubSecurityGroup
      KeyName: 'scipool'
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref VolumeSize
            Encrypted: true
      IamInstanceProfile: !Ref 'InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource LinuxInstance --configsets SetupCfn,SetEnv,SetupApacheProxy,SetupSynapseCredEnv --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource LinuxInstance --region ${AWS::Region}
      PropagateTagsToVolumeOnCreation: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: Description
          Value: !Sub "Service Catalog instance created by ${AWS::StackName}"
        - Key: "ManagedInstanceMaintenanceTarget"
          Value: "yes"
        - Key: "PatchGroup"
          Value: "prod-default"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W1011
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Port: 443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref LinuxInstance
        Port: 443
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue
          'Fn::FindInMap': [AccountToImportParams, !Ref "AWS::AccountId", VPCId]
      Tags:
      - Key: Name
        Value: !Sub 'TargetGroup-${LinuxInstance}'

  AlbListenerRule:
    Type: Custom::ALBListenerRule
    Properties:
      ServiceToken: !ImportValue
        'Fn::Sub': '${AWS::Region}-cfn-cr-alb-rule-FunctionArn'
      InstanceId: !Ref LinuxInstance
      TargetGroupArn: !Ref EC2TargetGroup
      ListenerArn: !ImportValue
        'Fn::Sub': '${AWS::Region}-alb-notebook-access-ALBListenerARN'
  TagInstance:
    DependsOn: "InstanceProfile"
    Type: Custom::SynapseTagger
    Properties:
      ServiceToken: !ImportValue
        'Fn::Sub': '${AWS::Region}-cfn-cr-synapse-tagger-SetInstanceTagsFunctionArn'
      InstanceId: !Ref LinuxInstance
Outputs:
  LinuxInstanceId:
    Description: 'The ID of the EC2 instance'
    Value: !Ref 'LinuxInstance'
  LinuxInstancePrivateIpAddress:
    Description: 'The IP Address of the EC2 instance'
    Value: !GetAtt 'LinuxInstance.PrivateIp'
  EC2InstanceType:
    Description: 'The EC2 instance type'
    Value: !Ref 'EC2InstanceType'
  ConnectionInstructions:
    Description: 'Guidelines on connecting to instances'
    Value: "https://sagebionetworks.jira.com/wiki/spaces/IT/pages/996376579/Connect+to+Provisioned+Instances"
  ConnectionURI:
    Description: 'Starts a shell session in the AWS Console'
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${LinuxInstance}?region=${AWS::Region}"
  EC2ConsoleURI:
    Description: 'Check your instance status with this link to the AWS Console'
    Value: !Sub "https://console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#Instances:search=${LinuxInstance}"
  NotebookConnectionURI:
    Description: 'Notebook server login page'
    Value: !Sub
      - '${ALBConnectionURI}/${Path}/'
      - ALBConnectionURI: !ImportValue
          'Fn::Sub': '${AWS::Region}-alb-notebook-access-ConnectionURI'
        Path: !Ref LinuxInstance
  Documentation:
    Description: 'Service Catalog Documentation'
    Value: "https://help.sc.sageit.org/sc/Service-Catalog-Provisioning.938836322.html"
